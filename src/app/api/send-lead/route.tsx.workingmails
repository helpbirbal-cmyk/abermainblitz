import { NextRequest, NextResponse } from 'next/server';
import { Resend } from 'resend';

export async function POST(request: Request) {
  const resendApiKey = process.env.RESEND_API_KEY;
  const emailFrom = process.env.EMAIL_FROM;

  try {
    // 1. Check for required environment variables first
    if (!resendApiKey || !emailFrom) {
      console.error('Server configuration error: Missing required environment variables');
      return NextResponse.json(
        {
          error: 'Server configuration error: Missing required environment variables'
        },
        { status: 500 }
      );
    }

    // 2. Initialize Resend here, after validation
    const resend = new Resend(resendApiKey);

    // 3. Get the request body
    const { name, email, company, phone, calculatorResults } = await request.json();

    // CRITICAL FIX: Safely process calculatorResults into an array of metrics.
    let metrics: { label: string, value: any, isPositive: boolean }[] = [];

    if (Array.isArray(calculatorResults)) {
      // Case 1: Already the desired array format (ideal scenario)
      metrics = calculatorResults;
    } else if (calculatorResults && typeof calculatorResults === 'object' && Object.keys(calculatorResults).length > 0) {
      // Case 2: Received a single object (as seen in screenshot). Convert it to an array.
      metrics = Object.entries(calculatorResults).map(([key, value]) => ({
        // Converts camelCase (e.g., annualSalarySavings) to readable text (Annual Salary Savings)
        label: key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()),
        value: value,
        isPositive: typeof value === 'number' ? value >= 0 : true, // Basic check for positivity if it's a number
      }));
    }
    // Note: If metrics remains an empty array [], metricsHtml will be an empty string, which is correct.


    // 4. Send email to sales team
    const salesEmail = await resend.emails.send({
      from: emailFrom, // Use the checked variable
      to: 'aberdeenassociate@gmail.com',
      subject: `New ROI Calculator Lead: ${name} from ${company}`,
      html: `
        <h2>New Lead from ROI Calculator</h2>
        <p><strong>Name:</strong> ${name}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>Company:</strong> ${company}</p>
        <p><strong>Phone:</strong> ${phone || 'Not provided'}</p>
        <h3>Calculator Results Raw Data:</h3>
        <pre>${JSON.stringify(calculatorResults, null, 2)}</pre>
        <p><em>Received: ${new Date().toLocaleString()}</em></p>
      `
    });

    // 5. Send confirmation email to user

    // Pre-process the dynamic metrics part of the email, using the safe 'metrics' array
    // Displaying ALL metrics generated from the calculatorResults object.
    const metricsHtml = metrics.map((metric, index) => { // Removed .slice(0, 4)
        const isPositive = typeof metric.isPositive === 'boolean' ? metric.isPositive : true;
        const valueColor = isPositive ? 'green' : 'red';

        // Format the value, adding commas for large numbers if it's a number
        const rawValue = metric.value || 0;
        let displayValue;

        if (typeof rawValue === 'number') {
            displayValue = rawValue.toLocaleString('en-US');
            // Basic currency formatting guess for certain metrics
            if (metric.label.toLowerCase().includes('salary') || metric.label.toLowerCase().includes('savings')) {
                displayValue = '$' + displayValue;
            }
        } else {
            displayValue = String(rawValue) || 'N/A';
        }

        return `
            <div style="text-align: center; float: left; width: 50%; box-sizing: border-box; padding: 0.75rem;">
                <div style="font-size: 1.125rem; font-weight: bold; color: ${valueColor};">
                    ${displayValue}
                </div>
                <div style="font-size: 0.75rem; color: #4b5563;">${metric.label || 'Metric'}</div>
            </div>
        `;
    }).join('');

    // The main email sending function
    const userEmail = await resend.emails.send({
        from: emailFrom, // Use the checked variable
        to: email,
        subject: 'Your AberCXO Analysis Report',
        html: `
            <h2>Thanks for using AberCXO Financial Modelling Tool!</h2>
            <p>Hi ${name},</p>
            <p>We've received your information and will contact you shortly to discuss your customized analysis.</p>
            <h3>Your Estimated AberCXO Impact:</h3>

            <h4 style="font-weight: 600; color: #1f2937; margin-bottom: 0.75rem;">Preliminary Analysis</h4>

            <!-- Using a container with overflow: hidden to clear the floating elements inside -->
            <div style="width: 100%; overflow: hidden; margin-bottom: 1rem;">
                ${metricsHtml}
            </div>

            <p>Our sales team may reach out within 24 working hours to discuss these results in detail.</p>
            <p>Best regards,<br/>Managing Partner, AberCXO</p>
        `
    });

    // 6. Return success
    return NextResponse.json({
      success: true,
      message: 'Emails sent successfully'
    }, { status: 200 });

  } catch (error) {
    console.error('Error sending emails (Resend API likely failed):', error);
    // This 500 status is what the client-side ROICalculator.tsx receives.
    return NextResponse.json({ error: 'Failed to send emails' }, { status: 500 });
  }
}
